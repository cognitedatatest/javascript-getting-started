{"version":3,"sources":["Layout.js","App.js","index.js"],"names":["Layout","state","timeseriesIds","onTimeserieSelectionChange","_this","setState","this","react_default","a","createElement","Fragment","className","index_es","startTime","Date","now","endTime","zoomable","contextChart","styles","container","height","list","Component","App","tenant","client","CogniteClient","appId","onTenantSelected","_callee","regenerator_default","wrap","_context","prev","next","loginWithOAuth","project","onAuthenticate","POPUP","authenticate","stop","isLoginPopupWindow","loginPopupHandler","title","initialTenant","isLoggedIn","src_Layout_0","renderLoginScreen","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"8VAsCeA,qNAjCbC,MAAQ,CACNC,cAAe,MAGjBC,2BAA6B,SAAAD,GAC3BE,EAAKC,SAAS,CAAEH,2FAGT,IACCA,EAAkBI,KAAKL,MAAvBC,cACR,OACEK,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEV,cAAeA,EACfW,UAAWC,KAAKC,MAAQ,OACxBC,QAASF,KAAKC,MACdE,UAAU,EACVC,cAAc,EACdC,OAAQ,CAACC,UAAW,CAACC,OAAO,aAGhCd,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACET,2BAA4BG,KAAKH,2BACjCgB,OAAQ,CAACG,KAAM,CAACD,OAAQ,qBA1BfE,cCiDNC,6MA7CbvB,MAAQ,CACNwB,OAAQ,QAEVC,OAAS,IAAIC,gBAAc,CAACC,MAAO,2BASnCC,uDAAmB,SAAAC,EAAML,GAAN,OAAAM,EAAAvB,EAAAwB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACjB/B,EAAKsB,OAAOU,eAAe,CACzBC,QAASZ,EACTa,eAAgBC,UAHDN,EAAAE,KAAA,EAKX/B,EAAKsB,OAAOc,eALD,OAMjBpC,EAAKC,SAAS,CAAEoB,WANC,wBAAAQ,EAAAQ,SAAAX,+IANbY,gCACFC,0EAeF,OACEpC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,6BACbJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CACEgC,MAAM,eACNC,cAAc,aACdhB,iBAAkBvB,KAAKuB,qDAO7B,IAAMiB,EAAmC,OAAtBxC,KAAKL,MAAMwB,OAC9B,OACElB,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAmBc,OAAQpB,KAAKoB,QAC9BnB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACZmC,EAAavC,EAAAC,EAAAC,cAACsC,EAAD,MAAYzC,KAAK0C,6BAvCvBzB,aCFlB0B,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.959a1020.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { TimeseriesSearch, TimeseriesChart } from '@cognite/gearbox';\nimport './Layout.css';\n\nclass Layout extends Component {\n  state = {\n    timeseriesIds: [],\n  }\n\n  onTimeserieSelectionChange = timeseriesIds => {\n    this.setState({ timeseriesIds });\n  }\n\n  render() {\n    const { timeseriesIds } = this.state;\n    return (\n      <React.Fragment>\n        <div className=\"left-side\">\n          <TimeseriesChart\n            timeseriesIds={timeseriesIds}\n            startTime={Date.now() - 30*24*60*60*1000}\n            endTime={Date.now()}\n            zoomable={true}\n            contextChart={true} \n            styles={{container: {height:'100vh'}}}\n          />\n        </div>\n        <div className=\"right-side\">\n          <TimeseriesSearch\n            onTimeserieSelectionChange={this.onTimeserieSelectionChange}\n            styles={{list: {height: '100vh'}}}\n          />\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Layout;\n","import React, { Component } from 'react';\nimport { ClientSDKProvider, TenantSelector } from '@cognite/gearbox';\nimport 'antd/dist/antd.css';\nimport './App.css';\nimport { CogniteClient, isLoginPopupWindow, loginPopupHandler, POPUP } from '@cognite/sdk';\nimport Layout from './Layout';\n\nclass App extends Component {\n  state = {\n    tenant: null,\n  };\n  client = new CogniteClient({appId: 'charting-app-example'});\n\n  componentDidMount() {\n    if (isLoginPopupWindow()) {\n      loginPopupHandler();\n      return;\n    }\n  }\n\n  onTenantSelected = async tenant => {\n    this.client.loginWithOAuth({\n      project: tenant,\n      onAuthenticate: POPUP,\n    });\n    await this.client.authenticate();\n    this.setState({ tenant });\n  };\n\n  renderLoginScreen() {\n    return (\n      <div className=\"tenant-selector-container\">\n        <TenantSelector\n          title=\"Charting App\"\n          initialTenant=\"publicdata\"\n          onTenantSelected={this.onTenantSelected}\n        />\n      </div>\n    );\n  }\n\n  render() {\n    const isLoggedIn = this.state.tenant !== null;\n    return (\n      <ClientSDKProvider client={this.client}>\n        <div className=\"main-layout\">\n          {isLoggedIn ? <Layout/> : this.renderLoginScreen()}\n        </div>\n      </ClientSDKProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}