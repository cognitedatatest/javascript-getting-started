{"version":3,"sources":["Layout.js","App.js","index.js"],"names":["Layout","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onTimeserieSelectionChange","timeseriesIds","setState","onFileSelected","event","target","files","length","selectedFile","imageRef","current","src","URL","createObjectURL","isImageLoaded","state","React","createRef","react_default","a","createElement","className","type","onChange","index_es","alt","ref","style","width","display","Component","App","tenant","client","CogniteClient","appId","onTenantSelected","_callee","regenerator_default","wrap","_context","prev","next","loginWithOAuth","project","onAuthenticate","POPUP","authenticate","stop","isLoginPopupWindow","loginPopupHandler","title","initialTenant","isLoggedIn","src_Layout_0","renderLoginScreen","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"qVAsDeA,sBAjDb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,2BAA6B,SAAAC,GAC3BR,EAAKS,SAAS,CAAED,mBAVCR,EAanBU,eAAiB,SAAAC,GACf,GAAIA,EAAMC,QAAUD,EAAMC,OAAOC,OAASF,EAAMC,OAAOC,MAAMC,OAAQ,CACnE,IAAMC,EAAeJ,EAAMC,OAAOC,MAAM,GACpCb,EAAKgB,UAAYhB,EAAKgB,SAASC,UACjCjB,EAAKgB,SAASC,QAAQC,IAAMC,IAAIC,gBAAgBL,GAChDf,EAAKS,SAAS,CAAEY,eAAe,OAhBnCrB,EAAKsB,MAAQ,CACXd,cAAe,GACfa,eAAe,GAEjBrB,EAAKgB,SAAWO,IAAMC,YANLxB,wEAwBjB,OACEyB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOC,SAAU3B,KAAKO,iBAClCe,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAevB,cAAeL,KAAKmB,MAAMd,eACvCiB,EAAAC,EAAAC,cAAA,OACEK,IAAI,GACJC,IAAK9B,KAAKa,SACVkB,MAAO,CACLC,MAAO,OACPC,QAASjC,KAAKmB,MAAMD,cAAgB,QAAU,YAKtDI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACExB,2BAA4BJ,KAAKI,sCA1CxB8B,cCkDNC,qNA/CbhB,MAAQ,CACNiB,OAAQ,QAEVC,OAAS,IAAIC,gBAAc,CAACC,MAAO,2BASnCC,uDAAmB,SAAAC,EAAML,GAAN,OAAAM,EAAAnB,EAAAoB,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACjBjD,EAAKwC,OAAOU,eAAe,CACzBC,QAASZ,EACTa,eAAgBC,UAHDN,EAAAE,KAAA,EAKXjD,EAAKwC,OAAOc,eALD,OAMjBtD,EAAKS,SAAS,CAAE8B,WANC,wBAAAQ,EAAAQ,SAAAX,+IANbY,gCACFC,0EAeF,OACEhC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CACE2B,MAAM,kBACNC,cAAc,aACdhB,iBAAkBxC,KAAKwC,sDAQ/B,IAAMiB,EAAmC,OAAtBzD,KAAKmB,MAAMiB,OAC9B,OACEd,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAmBS,OAAQrC,KAAKqC,QAC9Bf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACZgC,EAAanC,EAAAC,EAAAC,cAACkC,EAAD,MAAY1D,KAAK2D,6BAzCvBzB,cCAlB0B,IAASC,OAAOvC,EAAAC,EAAAC,cAACsC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.0e09365c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { TimeseriesSearch, SensorOverlay } from \"@cognite/gearbox\";\nimport \"./Layout.css\";\n\nclass Layout extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      timeseriesIds: [],\n      isImageLoaded: false\n    };\n    this.imageRef = React.createRef();\n  }\n\n  onTimeserieSelectionChange = timeseriesIds => {\n    this.setState({ timeseriesIds });\n  };\n\n  onFileSelected = event => {\n    if (event.target && event.target.files && event.target.files.length) {\n      const selectedFile = event.target.files[0];\n      if (this.imageRef && this.imageRef.current) {\n        this.imageRef.current.src = URL.createObjectURL(selectedFile);\n        this.setState({ isImageLoaded: true });\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"main-layout\">\n        <div className=\"left-side\">\n          <input type=\"file\" onChange={this.onFileSelected} />\n          <SensorOverlay timeseriesIds={this.state.timeseriesIds}>\n            <img\n              alt=\"\"\n              ref={this.imageRef}\n              style={{\n                width: \"100%\",\n                display: this.state.isImageLoaded ? \"block\" : \"none\"\n              }}\n            />\n          </SensorOverlay>\n        </div>\n        <div className=\"right-side\">\n          <TimeseriesSearch\n            onTimeserieSelectionChange={this.onTimeserieSelectionChange}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Layout;\n","import React, { Component } from 'react';\nimport { ClientSDKProvider, TenantSelector } from '@cognite/gearbox';\nimport { CogniteClient, isLoginPopupWindow, loginPopupHandler, POPUP } from '@cognite/sdk';\nimport Layout from './Layout';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    tenant: null,\n  };\n  client = new CogniteClient({appId: 'charting-app-example'});\n\n  componentDidMount() {\n    if (isLoginPopupWindow()) {\n      loginPopupHandler();\n      return;\n    }\n  }\n\n  onTenantSelected = async tenant => {\n    this.client.loginWithOAuth({\n      project: tenant,\n      onAuthenticate: POPUP,\n    });\n    await this.client.authenticate();\n    this.setState({ tenant });\n  };\n\n  renderLoginScreen() {\n    return (\n      <div className=\"login-page-container\">\n        <div className=\"login-container\">\n          <TenantSelector\n            title=\"Infographic App\"\n            initialTenant=\"publicdata\"\n            onTenantSelected={this.onTenantSelected}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const isLoggedIn = this.state.tenant !== null;\n    return (\n      <ClientSDKProvider client={this.client}>\n        <div className=\"main-layout\">\n          {isLoggedIn ? <Layout/> : this.renderLoginScreen()}\n        </div>\n      </ClientSDKProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"antd/dist/antd.css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}